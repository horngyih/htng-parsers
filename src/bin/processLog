#! /usr/bin/env node
/* jshint esversion:6 */

const fs = require("fs");
const path = require( "path" );
const program = require("commander");
const xmljs = require("xml-js");
const moment = require("moment");

const ReadLine = require("readline");
const LogFileCompactor = require(path.join("..","utils","logFileCompactor"));
const Log4JEventParser = require(path.join("..","utils","log4jEventParser"));
const extractXML = require( path.join("..","utils","xmlExtractor"));

const processingUtil = require( path.join("..","utils","processingUtils"));

const availNotif = require( path.join("..","messages","htng","otaHotelAvailNotifRQ"));
const ratePlanNotif = require( path.join("..","messages","htng","otaHotelRatePlanNotifRQ"));

const _OTA_HotelAvailNotifRQ = "OTA_HotelAvailNotifRQ";
const _OTA_HotelRatePlanNotifRQ = "OTA_HotelRatePlanNotifRQ";
const _OTA_HotelResNotifRQ = "OTA_HotelResNotifRQ";

const messageTypes = {
    OTA_HotelAvailNotifRQ : {
        flat : availNotif.flattenOTAHotelAvailNotifRQ,
        parse : availNotif.parseOTAHotelAvailNotifRQ
    },
    OTA_HotelRatePlanNotifRQ : {
        flat : ratePlanNotif.flattenOTAHotelRatePlanNotifRQ,
        parse : ratePlanNotif.parseOTAHotelAvailNotifRQ
    },
    OTA_HotelResNotifRQ : {
        flat : function(item){return item}, //Dummy flat parser
        parse : function(item){return JSON.stringify(item)} //Dummy parse
    }
}

const package = require( path.join("..","..","package.json"));
program
.version(package.version)
.usage( "[options] <filename>")
.arguments("<filename...>")
.option( "-o, --output <value>", "Output file" )
.option( "-d, --delimiter <value>", "Output delimiter" )
.option( "-p, --propertyCode <value>", "Filter by propertyCode" )
.option( "--rateCode <value>", "Filter by Rate Plan Code" )
.option( "--roomType <value>", "Filter by Room Type Code" )
.option( "--startDate <value>", "Filter by Start Date (on or after start date)", dateParser )
.option( "--endDate <value>", "Filter by End Date (on or before end date )", dateParser )
.option( "-m, --message <value>", "Filter for Message Type" )
.option( "-f, --from <value>", "Message sent after this timestamp", dateTimeParser )
.option( "-t, --to <value>", "Message sent before this timestamp", dateTimeParser )
.option( "--parallel", "Process file in parallel" )
.action(function(filename, messageType ){
    processLogs(filename, messageType );
})
.parse(process.argv);

function processLogs(files, messageType ){
    program.message = mapMessageType(program.message);
    var targetFiles = [];
    if( files ){
        targetFiles = targetFiles.concat(files);
        targetFiles.forEach(function(file){
            if( program.parallel ){
                processLogFileParallel(file, messageType);
            } else {
                processLogFile(file, messageType);
            }
        });
    }
}

function processLogFile(filename, messageType){
    printExecutionHeader(filename);
     var processor = processor || printOut;
    extract(filename)
    .then(parseEvents)
    .then(filterEvents)
    .then(processEvents)
    .then(collateMessages)
    .then(processTargetMessageType)
    .then(filterMessages)
    .then(processor)
    .then(function(){
        printLine( "DONE - ", filename );
    })
    .catch(handleError);
}

function processLogFileParallel(filename, messageType){
    return new Promise(function(resolve, reject){
        printExecutionHeader(filename);
        var processor = processor || printOut;

        function header(){
            suppressHeader = false;
            return function(result){
                return new Promise(function(resolve,reject){
                    if( !suppressHeader ){
                        if( result && result.length > 0 ){
                            printHeader(result[0]);
                            suppressHeader = true;
                        }
                    }
                    resolve(result);
                });
            };
        }

        var headerPrinter = header();
        function processLine(line){
            var result = [];
            if( line ){
                result = result.concat(line);
                parseEvents(result)
                .then(filterEvents)
                .then(processEvents)
                .then(collateMessages)
                .then(processTargetMessageType)
                .then(filterMessages)
                .then(headerPrinter)
                .then(processor)
                .then(resolve);
            } else {
                resolve();
            }
        }
        extract(filename, processLine );
    });
}

function extract(filename, lineProcessor){
    return new Promise(function(resolve, reject){
        var lineReader = ReadLine.createInterface({input: fs.createReadStream(filename)});
        var logFileCompactor = new LogFileCompactor();
        if( typeof lineProcessor === "function" ){
            logFileCompactor.on("line", lineProcessor);
        }
        lineReader.on("line", logFileCompactor.parse);
        lineReader.on("close", function(){
            logFileCompactor.close();
            resolve(logFileCompactor.parsed());
        });
    });
}

function parseEvents(lines){
    return new Promise(function(resolve,reject){
        if( lines ){
            var log4JEventParser = new Log4JEventParser();
            var events = lines.map(log4JEventParser.parse);
            resolve(events);
        } else {
            resolve([]);
        }
    });
}

function processEvents(events){
    return new Promise(function(resolve,reject){
        if( events ){
            var xmljsons = events
            .map(function(json){if(json){ return extractXML(json.data,{compact:true, spaces:2});}})
            .filter((item)=>item);
            resolve(xmljsons);
        } else {
            resolve([]);
        }            
    });
}

function filterEvents(events){
    return new Promise(function(resolve,reject){
        if( Array.isArray(events) ){
            resolve(events.filter(function(event){
                var eventTimestamp = (event.timestamp)?moment(event.timestamp,"MM-DD hh:mm:ss" ):null;
                if( eventTimestamp ){
                    if( program.to && program.from ){
                        return eventTimestamp.isBetween( program.from, program.to, null, "[]" );
                    } else if( program.to) {
                        return eventTimestamp.isSameOrBefore(program.to);
                    } else if( program.from ){
                        return eventTimestamp.isSameOrAfter(program.from);
                    }
                }
                return true;
            }));
        }
        resolve(events);        
    });
}

function filterMessages(messages){
    return new Promise(function(resolve,reject){
        if( Array.isArray(messages) ){
            if( program.propertyCode || program.rateCode || program.roomType ){
                resolve(messages.filter(function(message){
                    var result = true;
                    if( program.propertyCode ){
                        result &= message.propertyCode === program.propertyCode;
                    }
    
                    if( program.rateCode ){
                        result &= message.rate === program.rateCode;
                    }
    
                    if( program.roomType ){
                        result &= message.roomType === program.roomType;
                    }

                    if( program.startDate ){
                        if( moment.isMoment( program.startDate ) ){
                            result &=  program.startDate.isSameOrBefore(message.startDate);
                        }
                    }

                    if( program.endDate ){
                        if( moment.isMoment( message.endDate ) ){
                            result &= message.endDate.isSameOrBefore( program.endDate );
                        }
                    }

                    return result;
                }));
            } else {
                resolve(messages);
            }
        } else {
            resolve(messages);
        }
    });
}

function collateMessages(xmljsons){
    return new Promise(function(resolve,reject){
        if(xmljsons){
            if( Array.isArray(xmljsons) && xmljsons.length > 0 ){
                resolve(xmljsons.reduce(function(map,xmljs){
                    map = map || {};
                    if(xmljs){
                        var keys = Object.keys(xmljs);
                        var key = keys[0];
                        var bucket = map[key] || [];
                        bucket.push(xmljs);
                        map[key] = bucket;
                    }
                    return map;
                },{}));
            } else {
                resolve( xmljsons);
            }
        } else {
            resolve([]);
        }
    });
}

function processTargetMessageType(result){
    return new Promise(function(resolve,reject){
        var messageType = program.message;
        var targetMessages = result[messageType];
        if( targetMessages ){
            var parser = messageTypes[messageType].flat;
            if( typeof parser !== "function" ){
                parser = function(item){ return item; };
            }
            var parsed = targetMessages.map(parser).reduce(processingUtil.flatten,[]);
            resolve(parsed);
        } else {
            resolve([]);
        }
    });
}

function printOut(result){
    if( result ){
        if( Array.isArray(result) ){
            printArray(result);
        } else {
            for( var key in result ){
                printLine(key);
                if( Array.isArray(result) ){
                    printArray(result);
                } else {
                    printLine(JSON.stringify(result[key]));
                }
            }
        }
    }
}

function printArray(result){
    if( result.length > 0 ){
        var sample = result[0];
        if( !program.parallel ){
            printHeader(sample);
        }
        var props = getMessageFormatters(program.message);
        result.forEach(function(data){ printData( data, props ); });
    } else {
        if( !program.parallel ){
            printLine( "No results found" );
        }
    }
}

function printExecutionHeader(file){
    var executionHeader = "";
    if( file ){
        executionHeader += "File:";
        executionHeader += file;
    }

    if( program.message ){
        executionHeader += "-";
        executionHeader += program.message;
    }

    if( moment.isMoment(program.from) ){
        executionHeader += "-From:";
        executionHeader += program.from.format("YYYY-MM-DD HH:mm:ss");
    }

    if( moment.isMoment(program.to) ){
        executionHeader += "-To:";
        executionHeader += program.to.format("YYYY-MM-DD HH:mm:ss");
    }

    if( program.propertyCode ){
        executionHeader += "-Property Code:";
        executionHeader += program.propertyCode;
    }

    if( program.rateCode ){
        executionHeader += "-RateCode:";
        executionHeader += program.rateCode;
    }

    if( program.roomType ){
        executionHeader += "-RoomType:";
        executionHeader += program.roomType;
    }
    printLine(executionHeader);
}

function printHeader(sample){
    var keys = Object.keys(sample);
    var line = "";
    for( var i in keys ){
        var key = keys[i];
        line+= key;
        if( i < keys.length ){
            line += program.delimiter || "|";
        }                
    }
    printLine(line);
}

function printData(item, props ){
    if( item ){
        var formatters = getMessageFormatters(program.message) || {};
        var keys = Object.keys(item);
        var line = "";
        for( var i in keys ){
            var key = keys[i];
            var value = item[key];
            var formatter = formatters[key] || function(item){ return JSON.stringify(item);};
            value = formatter(value);
            line += value;
            if( i < keys.length ){
                line += program.delimiter || "|";
            }
        }
        printLine(line);
    }
}

function mapMessageType(messageType){
    if( typeof messageType === "string" ){
        messageType = messageType.toLowerCase();
        if(messageType === "rate" ){
            return _OTA_HotelRatePlanNotifRQ;
        } else if( messageType === "avail" || messageType === "availability" ){
            return _OTA_HotelAvailNotifRQ;
        } else if( messageType === "reservation" ){
            return _OTA_HotelResNotifRQ;
        }
    }
    console.log( "No Message Type specified - Default to [OTA_HotelAvailNotifRQ]" );
    return _OTA_HotelAvailNotifRQ;
}

function getMessageFormatters(messageType){
    if(messageType){
        messageType = messageType;
        switch( messageType ){
            case "OTA_HotelRatePlanNotifRQ":
                return ratePlanNotif.dataFormatters;
            case "OTA_HotelAvailNotifRQ":
                return availNotif.dataFormatters;
        }
    }
    return null;
}

function handleError(err){
    console.error(err);
}

function printLine(){
    if( arguments.length > 0 ){
        if( arguments.length === 1 ){
            console.log(arguments[0]);
        } else {
            var texts = [].slice.call(arguments,0, arguments.length-1);
            var lastArgument = arguments[arguments.length-1];
            var printToFileFlag = false;
            if( lastArgument === true || lastArgument === false ){
                printToFileFlag = lastArgument;
            } else {
                texts = texts.concat(lastArgument);
            }

            console.log( texts.join("") );
            if( printToFileFlag === true ){
                //Add to output file buffer
                printToFile(texts.join(""));
            }
        }
    }
}

function printToFile(text){
    //TODO: Implement write to output file where applicable;
}

function dateParser(value){
    if( value ){
        return moment(value, "YYYY-MM-DD" );
    } else {
        return value;
    }
}

function dateTimeParser(value){
    if( value ) {
        return moment(value, "YYYY-MM-DD HH:mm:ss" );
    } else {
        return value;
    }
}
